/**
 * Copyright Universite Joseph Fourier (www.ujf-grenoble.fr)
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package fr.liglab.adele.cilia.workbench.common.marker;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.resources.IMarker;

import fr.liglab.adele.cilia.workbench.common.misc.Strings;

/**
 * Base abstract class, for implementing flags generated by
 * {@link ErrorsAndWarningsFinder}.
 * 
 * @author Etienne Gandrille
 */
public abstract class CiliaFlag {

	/** the severity of this error, from the {@link IMarker} point of view */
	private final int severity;
	/** a user readable message */
	private final String message;
	/** a reference to the object responsible of the creation of this flag */
	private Object sourceProvider;

	/**
	 * Instantiates a new cilia flag.
	 * 
	 * @param severity
	 *            the severity of this error, from the {@link IMarker} point of
	 *            view
	 * @param message
	 *            a user readable message
	 * @param sourceProvider
	 *            a reference to the object responsible of the creation of this
	 *            flag
	 */
	public CiliaFlag(int severity, String message, Object sourceProvider) {
		this.severity = severity;
		this.message = message;
		this.sourceProvider = sourceProvider;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == this)
			return true;
		if (!(obj instanceof CiliaFlag))
			return false;

		CiliaFlag other = (CiliaFlag) obj;

		if (severity != other.getSeverity())
			return false;
		if (!Strings.nullToEmpty(message).equals(Strings.nullToEmpty(other.getMessage())))
			return false;
		if (sourceProvider == null && other.getSourceProvider() != null)
			return false;
		if (sourceProvider == null && other.getSourceProvider() == null)
			return true;
		return sourceProvider.equals(other.getSourceProvider());
	}

	@Override
	public int hashCode() {
		int result = 17;
		result = 31 * result + severity;
		result = 31 * result + Strings.nullToEmpty(message).hashCode();
		if (sourceProvider != null)
			result = 31 * result + sourceProvider.hashCode();
		return result;
	}

	/**
	 * Helper method, for generating a CiliaFlag Tab, from CiliaFlag.
	 * 
	 * @param flags
	 *            a list of CiliaFlag, with null values allowed
	 * @return a tab of CiliaFlag, without null values (filtered by this
	 *         method).
	 */
	public static CiliaFlag[] generateTab(CiliaFlag... flags) {
		List<CiliaFlag> retval = new ArrayList<CiliaFlag>();

		for (CiliaFlag flag : flags)
			if (flag != null)
				retval.add(flag);

		return retval.toArray(new CiliaFlag[0]);
	}

	/**
	 * Helper method, for generating a CiliaFlag Tab, from CiliaFlag.
	 * 
	 * @param tab
	 *            a tab of CiliaFlag, with null values allowed
	 * @param flags
	 *            a list of CiliaFlag, with null values allowed
	 * @return a tab of CiliaFlag, without null values (filtered by this
	 *         method).
	 */
	public static CiliaFlag[] generateTab(Iterable<CiliaFlag> tab, CiliaFlag... flags) {
		List<CiliaFlag> retval = new ArrayList<CiliaFlag>();

		if (tab != null)
			for (CiliaFlag flag : tab)
				if (flag != null)
					retval.add(flag);

		if (flags != null)
			for (CiliaFlag flag : flags)
				if (flag != null)
					retval.add(flag);

		return retval.toArray(new CiliaFlag[0]);
	}

	/**
	 * Helper method, for generating a CiliaFlag Tab, from CiliaFlag.
	 * 
	 * @param tab
	 *            a tab of CiliaFlag, with null values allowed
	 * @param flags
	 *            a list of CiliaFlag, with null values allowed
	 * @return a tab of CiliaFlag, without null values (filtered by this
	 *         method).
	 */
	public static CiliaFlag[] generateTab(CiliaFlag[] tab, CiliaFlag... flags) {
		List<CiliaFlag> retval = new ArrayList<CiliaFlag>();

		if (tab != null)
			for (CiliaFlag flag : tab)
				if (flag != null)
					retval.add(flag);

		if (flags != null)
			for (CiliaFlag flag : flags)
				if (flag != null)
					retval.add(flag);

		return retval.toArray(new CiliaFlag[0]);
	}

	public static CiliaFlag[] generateTab(CiliaFlag[] tab1, CiliaFlag[] tab2, CiliaFlag... flags) {
		List<CiliaFlag> retval = new ArrayList<CiliaFlag>();

		if (tab1 != null)
			for (CiliaFlag flag : tab1)
				if (flag != null)
					retval.add(flag);

		if (tab2 != null)
			for (CiliaFlag flag : tab2)
				if (flag != null)
					retval.add(flag);

		if (flags != null)
			for (CiliaFlag flag : flags)
				if (flag != null)
					retval.add(flag);

		return retval.toArray(new CiliaFlag[0]);
	}

	public static CiliaFlag[] generateTab(CiliaFlag[] tab1, Iterable<CiliaFlag> tab2, CiliaFlag... flags) {
		return generateTab(tab1, generateTab(tab2, flags));
	}

	public static CiliaFlag[] generateTab(Iterable<CiliaFlag> tab1, CiliaFlag[] tab2, CiliaFlag... flags) {
		return generateTab(tab1, generateTab(tab2, flags));
	}

	/**
	 * Gets the severity of this error, from the {@link IMarker} point of view.
	 * 
	 * @return the severity of this error, from the {@link IMarker} point of
	 *         view.
	 */
	public int getSeverity() {
		return severity;
	}

	/**
	 * Gets a user readable message.
	 * 
	 * @return a user readable message.
	 */
	public String getMessage() {
		return message;
	}

	/**
	 * Gets a reference to the object responsible of the creation of this flag.
	 * 
	 * @return a reference to the object responsible of the creation of this
	 *         flag
	 */
	public Object getSourceProvider() {
		return sourceProvider;
	}

	public CiliaFlag changeSourceProvider(Object newSourceProvider) {
		sourceProvider = newSourceProvider;
		return this;
	}
}
